
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// For NextAuth.js compatibility & Email/Google Auth
model User {
  id            String    @id @default(cuid())
  password      String?
  name          String
  email         String    @unique
  dateOfBirth   DateTime? // Important for eligibility
  aadhaarNumber String?   @unique// For Aadhaar verification
  isAadhaarVerified Boolean @default(false)
  personalInfo  PersonalInfo?
  academicRecords AcademicRecord[]
  skills        Skill[]
  certifications Certification[]
  projects      Project[]
  // achievements  Achievement[]
  fileUploads   FileUpload[]
  preference    Preference?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileStatus ProfileStatus @default(PENDING) // Tracks overall form completion
}


model PersonalInfo {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender              Gender?
  mobileNumber        String
  altMobileNumber     String?
  linkedInUrl         String?
  githubUrl           String?
  permanentAddress    String
  permanentPincode    String
  currentAddress      String?
  currentPincode      String?
  category            Category
  hasDisability       Boolean? @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
// User Profile Models (All connected to User.id)
//to be added
//10-12 different school,name and details
//cgpa
model AcademicRecord {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  level       AcademicLevel
  instituteName  String?
  board_university      String
  yearOfPassing Int
  percentage  Float?
  grade String?
  cgpa        Float?
  backlogs    Boolean? @default(false)
  // For UG/PG
  // collegeName String?
  // university  String?
  branch      String?
  currentYear Int?
  currentSem  Int?
  current_cgpa Float?
  current_percentage Float?
  current_grade String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String // Custom skill name
  category SkillCategory
}

model Certification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  startDate   DateTime
  description String?
  certificate_type CertificateType?
  endDate     DateTime?
  certificateUrl String? // URL from Supabase bucket
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  livelink    String?
  githublink  String?
  techStack   String[]
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model Achievement {
//   id    String @id @default(cuid())
//   userId String
//   user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   description String
//   certificationUrl String?
//   name String 
//   date DateTime
// }

model FileUpload {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       UploadType
  fileUrl    String // URL from Supabase bucket
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Preference {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  internshipMode   InternshipMode
  preferredLocation String   // Could be refined to link to a master Location table
  sectorOfInterest Sector[] // Using an enum for sectors
  languagesKnown   String[] // e.g., ["Hindi", "English"]
  willingToRelocate Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// JOB POSTING Model (Posted by Admin/Companies)
model JobPosting {
  id                 String   @id @default(cuid())
  companyName        String
  jobTitle           String
  skillsRequired     String[] // Could also be a relation to a master Skills table
  location           String
  mode               InternshipMode
  jobDescription     String
  specialRequirements String?
  duration           String   // e.g., "3 Months"
  jobType            JobType   // e.g., "SDE", "Data Science"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// ===== ENUMS =====

enum CertificateType {
  Hackathon
  Internship
  Course
}

enum JobType {
  SDE
  GAME_DEV
  TESTING
  CLOUD
  BLOCKCHAIN
  DATA_ENGINEER
  UI_UX
  CYBERSECURITY
  PRODUCT_MANAGER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Category {
  GENERAL
  OBC
  SC
  ST
  OTHER
}

enum AcademicLevel {
  TENTH
  TWELFTH
  DIPLOMA
  UG
  PG
  ITI
  OTHER
}

enum SkillCategory {
  TECHNICAL
  SOFT_SKILLS
  LANGUAGE
  TOOL
}

enum UploadType {
  PROFILE_PHOTO
  SIGNATURE
  TENTH_MARKSHEET
  TWELTH_MARKSHEET
  COLLEGE_ID
  DEGREE
  OTHER
}

enum InternshipMode {
  OFFLINE
  HYBRID
  ONLINE
}

enum Sector {
  IT
  FINANCE
  HEALTHCARE
  EDUCATION
  AGRICULTURE
  DESIGN
  MARKETING
  CORE_ENGINEERING
  HUMAN_RESOURCES
  OTHER
}

enum ProfileStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
}
        